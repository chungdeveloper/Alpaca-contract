{
	"compiler": {
		"version": "0.6.6+commit.6c089d02"
	},
	"language": "Solidity",
	"output": {
		"abi": [],
		"devdoc": {
			"details": "Contract module that helps prevent reentrant calls to a function.  * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them.  * Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them.  * TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
			"methods": {}
		},
		"userdoc": {
			"methods": {}
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/ReentrancyGuard.sol": "ReentrancyGuardUpgradeSafe"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/Initializable.sol": {
			"keccak256": "0x62188c77f79483af23e66038f5dce8496001dbd63017dc2c41d8a9bb801133f0",
			"urls": [
				"bzz-raw://8fba6162c8efb1f9361b5274809d5440191e9800e9aea5e1cb43ef0f9d14d8c1",
				"dweb:/ipfs/Qmb8d192osS5hwkxTZEZcTmhGJxPbHFa8EZxVJxAsjWkEN"
			]
		},
		"contracts/ReentrancyGuard.sol": {
			"keccak256": "0xbe4997434798f9f895ff9f79f786c09ce37a40da3bac21638b6b2aa3e4ba0ee6",
			"urls": [
				"bzz-raw://aa15c11a4f708d29a19c855d842c7e775cae5ddd1d9cba279a7f39b91bdad878",
				"dweb:/ipfs/QmbtcfjBgx7T7tvoyjcFsrKjJ7p7xixGA6Hg7yPm1qYw1q"
			]
		}
	},
	"version": 1
}